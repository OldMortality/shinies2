u <- matrix(runif(N*M),nrow=M)
v <- apply(t(u),2,sort)
u
w <- t(v)
plot('',xlim=c(1,N),ylim=c(0,1))
for (i in 1:N) {
segments(x0=i,x1 = i,y0=quantile(probs=0.025,x=w[,i]),y1=quantile(w[,i],0.975))
}
# N experiments, P true difference, N-P equal means
mu1 = 1
P = 10
# sample size
alpha <- 0.05
S <- 15
p.vals <- vector()
labels <- vector()
for (i in 1:N) {
if (i <= P) {
y1 <- rnorm(S,mu1)
} else {
y1 <- rnorm(S,0)
}
t <- t.test(y1)
p.vals[i] <- t$p.value
if (i <= P) {
labels[i] <- T
} else {
labels[i] <- F
}
}
dp1 <- data.frame(p.vals = p.vals,
labels = labels)
dp2 <- dp1[order(dp1$p.vals),]
for (i in 1:N) {
col <- 'red'
if (dp2$labels[i]==T) col <- 'blue'
points(i,dp2$p.vals[i],col=col)
}
# experiments
N <- 100
# number of p-values in the distribution
M <- 10000
u <- matrix(runif(N*M),nrow=M)
v <- apply(t(u),2,sort)
u
w <- t(v)
plot('',xlim=c(1,N),ylim=c(0,1))
for (i in 1:N) {
segments(x0=i,x1 = i,y0=quantile(probs=0.025,x=w[,i]),y1=quantile(w[,i],0.975))
}
# N experiments, P true difference, N-P equal means
mu1 = 1
P = 10
# sample size
alpha <- 0.05
S <- 15
p.vals <- vector()
labels <- vector()
for (i in 1:N) {
if (i <= P) {
y1 <- rnorm(S,mu1)
} else {
y1 <- rnorm(S,0)
}
t <- t.test(y1)
p.vals[i] <- t$p.value
if (i <= P) {
labels[i] <- T
} else {
labels[i] <- F
}
}
dp1 <- data.frame(p.vals = p.vals,
labels = labels)
dp2 <- dp1[order(dp1$p.vals),]
for (i in 1:N) {
col <- 'red'
if (dp2$labels[i]==T) col <- 'blue'
points(i,dp2$p.vals[i],col=col)
}
abline(h=0.05,col='blue')
# experiments
N <- 100
# number of p-values in the distribution
M <- 10000
u <- matrix(runif(N*M),nrow=M)
v <- apply(t(u),2,sort)
u
w <- t(v)
plot('',xlim=c(1,N),ylim=c(0,1))
for (i in 1:N) {
segments(x0=i,x1 = i,y0=quantile(probs=0.025,x=w[,i]),y1=quantile(w[,i],0.975))
}
# N experiments, P true difference, N-P equal means
mu1 = 1
P = 10
# sample size
alpha <- 0.05
S <- 15
p.vals <- vector()
labels <- vector()
for (i in 1:N) {
if (i <= P) {
y1 <- rnorm(S,mu1)
} else {
y1 <- rnorm(S,0)
}
t <- t.test(y1)
p.vals[i] <- t$p.value
if (i <= P) {
labels[i] <- T
} else {
labels[i] <- F
}
}
dp1 <- data.frame(p.vals = p.vals,
labels = labels)
dp2 <- dp1[order(dp1$p.vals),]
for (i in 1:N) {
col <- 'red'
if (dp2$labels[i]==T) col <- 'blue'
points(i,dp2$p.vals[i],col=col)
}
abline(h=0.05,col='blue')
# experiments
N <- 100
# number of p-values in the distribution
M <- 10000
u <- matrix(runif(N*M),nrow=M)
v <- apply(t(u),2,sort)
u
w <- t(v)
plot('',xlim=c(1,N),ylim=c(0,1))
for (i in 1:N) {
segments(x0=i,x1 = i,y0=quantile(probs=0.025,x=w[,i]),y1=quantile(w[,i],0.975))
}
# N experiments, P true difference, N-P equal means
mu1 = 1
P = 10
# sample size
alpha <- 0.05
S <- 15
p.vals <- vector()
labels <- vector()
for (i in 1:N) {
if (i <= P) {
y1 <- rnorm(S,mu1)
} else {
y1 <- rnorm(S,0)
}
t <- t.test(y1)
p.vals[i] <- t$p.value
if (i <= P) {
labels[i] <- T
} else {
labels[i] <- F
}
}
dp1 <- data.frame(p.vals = p.vals,
labels = labels)
dp2 <- dp1[order(dp1$p.vals),]
for (i in 1:N) {
col <- 'red'
if (dp2$labels[i]==T) col <- 'blue'
points(i,dp2$p.vals[i],col=col)
}
abline(h=0.05,col='blue')
# experiments
N <- 100
# number of p-values in the distribution
M <- 10000
u <- matrix(runif(N*M),nrow=M)
v <- apply(t(u),2,sort)
u
w <- t(v)
plot('',xlim=c(1,N),ylim=c(0,1))
for (i in 1:N) {
segments(x0=i,x1 = i,y0=quantile(probs=0.025,x=w[,i]),y1=quantile(w[,i],0.975))
}
# N experiments, P true difference, N-P equal means
mu1 = 1
P = 10
# sample size
alpha <- 0.05
S <- 15
p.vals <- vector()
labels <- vector()
for (i in 1:N) {
if (i <= P) {
y1 <- rnorm(S,mu1)
} else {
y1 <- rnorm(S,0)
}
t <- t.test(y1)
p.vals[i] <- t$p.value
if (i <= P) {
labels[i] <- T
} else {
labels[i] <- F
}
}
dp1 <- data.frame(p.vals = p.vals,
labels = labels)
dp2 <- dp1[order(dp1$p.vals),]
for (i in 1:N) {
col <- 'red'
if (dp2$labels[i]==T) col <- 'blue'
points(i,dp2$p.vals[i],col=col)
}
abline(h=0.05,col='blue')
# experiments
N <- 100
# number of p-values in the distribution
M <- 10000
u <- matrix(runif(N*M),nrow=M)
v <- apply(t(u),2,sort)
u
w <- t(v)
plot('',xlim=c(1,N),ylim=c(0,1))
for (i in 1:N) {
segments(x0=i,x1 = i,y0=quantile(probs=0.025,x=w[,i]),y1=quantile(w[,i],0.975))
}
# N experiments, P true difference, N-P equal means
mu1 = 1
P = 10
# sample size
alpha <- 0.05
S <- 15
p.vals <- vector()
labels <- vector()
for (i in 1:N) {
if (i <= P) {
y1 <- rnorm(S,mu1)
} else {
y1 <- rnorm(S,0)
}
t <- t.test(y1)
p.vals[i] <- t$p.value
if (i <= P) {
labels[i] <- T
} else {
labels[i] <- F
}
}
dp1 <- data.frame(p.vals = p.vals,
labels = labels)
dp2 <- dp1[order(dp1$p.vals),]
for (i in 1:N) {
col <- 'red'
if (dp2$labels[i]==T) col <- 'blue'
points(i,dp2$p.vals[i],col=col)
}
abline(h=0.05,col='blue')
# experiments
N <- 100
# number of p-values in the distribution
M <- 10000
u <- matrix(runif(N*M),nrow=M)
v <- apply(t(u),2,sort)
u
w <- t(v)
plot('',xlim=c(1,N),ylim=c(0,1))
for (i in 1:N) {
segments(x0=i,x1 = i,y0=quantile(probs=0.025,x=w[,i]),y1=quantile(w[,i],0.975))
}
# N experiments, P true difference, N-P equal means
mu1 = 1
P = 10
# sample size
alpha <- 0.05
S <- 10
p.vals <- vector()
labels <- vector()
for (i in 1:N) {
if (i <= P) {
y1 <- rnorm(S,mu1)
} else {
y1 <- rnorm(S,0)
}
t <- t.test(y1)
p.vals[i] <- t$p.value
if (i <= P) {
labels[i] <- T
} else {
labels[i] <- F
}
}
dp1 <- data.frame(p.vals = p.vals,
labels = labels)
dp2 <- dp1[order(dp1$p.vals),]
for (i in 1:N) {
col <- 'red'
if (dp2$labels[i]==T) col <- 'blue'
points(i,dp2$p.vals[i],col=col)
}
abline(h=0.05,col='blue')
# experiments
N <- 100
# number of p-values in the distribution
M <- 10000
u <- matrix(runif(N*M),nrow=M)
v <- apply(t(u),2,sort)
u
w <- t(v)
plot('',xlim=c(1,N),ylim=c(0,1))
for (i in 1:N) {
segments(x0=i,x1 = i,y0=quantile(probs=0.025,x=w[,i]),y1=quantile(w[,i],0.975))
}
# N experiments, P true difference, N-P equal means
mu1 = 0.4
P = 10
# sample size
alpha <- 0.05
S <- 10
p.vals <- vector()
labels <- vector()
for (i in 1:N) {
if (i <= P) {
y1 <- rnorm(S,mu1)
} else {
y1 <- rnorm(S,0)
}
t <- t.test(y1)
p.vals[i] <- t$p.value
if (i <= P) {
labels[i] <- T
} else {
labels[i] <- F
}
}
dp1 <- data.frame(p.vals = p.vals,
labels = labels)
dp2 <- dp1[order(dp1$p.vals),]
for (i in 1:N) {
col <- 'red'
if (dp2$labels[i]==T) col <- 'blue'
points(i,dp2$p.vals[i],col=col)
}
abline(h=0.05,col='blue')
shiny::runApp('Documents/shinies/app1')
install.packages("shinydashboard")
runApp('Documents/shinies/app1')
install.packages("ggplot2")
runApp('Documents/shinies/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
system.time()
system.time()
?system.time
Sys.time()
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
iris
class(iris)
runApp('Documents/shinies2/app1')
runApp()
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
?renderDataTable
install.packages("DT")
runApp('Documents/shinies2/app1')
runApp()
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp()
runApp('Documents/shinies2/app1')
getSummary <- function() {
input$goButton
t <- timenow$t
P = round(input$N * input$pperc)
l0 <- paste('alpha=',input$alpha,'Bonferroni')
l1 <- paste('True positives:',TP,'---',plain.TP)
l2 <- paste('False positives:',FP,'---'bonf.FP)
l3 <- paste('True negatives:',TN,'---',plain.TN)
l4 <- paste('False negatives:',FN,'---',bonf.FN)
#l5 <- paste('Power:',round(TP/P,2),'---',round(TP.B/P,2))
#l6 <- paste('FDR:',FP,'/(',FP,'+',TP,')=',   round(FP/(FP+TP),2))
#l7 <- paste('FDR bonferroni:',FP.B,'/(',FP.B,'+',TP.B,')=',   round(FP.B/(FP.B+TP.B),2))
result <- paste(l1,l2,l3,l4,sep="<BR>")
return(result)
}
runApp('Documents/shinies2/app1')
getTable <- function() {
df <- data.frame(plain = c(plain$FP,plain$FN,plain$TP,plain$TN),
bonf  = c(bonf.FP,bonf.FN,bonf.TP,bonf.TN))
rownames(df) <- c('False +','False -','True +','True - ')
return(df)
}
output$table <- renderDT(getTable(),options=list(lengthChange=F))
plain <- reactiveValues(FP = 0,
FN = 0,
TP = 0,
TN = 0)
bonf <-  reactiveValues(FP = 0,
FN = 0,
TP = 0,
TN = 0)
plain$FP <- false.pos
runApp('Documents/shinies2/app1')
runApp()
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
getPower <- function(n,sd,diff,alpha,bonf=F) {
if (bonf==T) {
alpha <- alpha / N
}
tp <- 0
for (i in 1:1000) {
y1 <- rnorm(n,mu1,sd=sd)
t <- t.test(y1)
p <- t$p.value
if (p<alpha) {
tp <- tp + 1
}
}
return(tp/1000)
}
bonf <-  reactiveValues(FP = 0,
FN = 0,
TP = 0,
TN = 0)
bonf <-  reactiveValues(FP = 0,
FN = 0,
TP = 0,
TN = 0)
getPower(n=20,sd=0.1,diff=0.1,alpha=0.05,bonf=F)
getPower(n=20,sd=0.2,diff=0.1,alpha=0.05,bonf=F)
getPower(n=20,sd=0.5,diff=0.1,alpha=0.05,bonf=F)
getPower(n=20,sd=0.6,diff=0.1,alpha=0.05,bonf=F)
getPower <- function(n,sd,diff,alpha,bonf=F) {
if (bonf==T) {
alpha <- alpha / N
}
tp <- 0
for (i in 1:1000) {
y1 <- rnorm(n,diff,sd=sd)
t <- t.test(y1)
p <- t$p.value
if (p<alpha) {
tp <- tp + 1
}
}
return(tp/1000)
}
getPower(n=20,sd=0.6,diff=0.1,alpha=0.05,bonf=F)
getPower(n=20,sd=0.6,diff=1,alpha=0.05,bonf=F)
getPower(n=20,sd=0.2,diff=1,alpha=0.05,bonf=F)
getPower(n=20,sd=1,diff=1,alpha=0.05,bonf=F)
getPower(n=20,sd=1,diff=0.5,alpha=0.05,bonf=F)
getPower(n=100,sd=0.5,diff=0.1,alpha=0.05,bonf=F)
getPower(n=120,sd=0.5,diff=0.1,alpha=0.05,bonf=F)
getPower(n=130,sd=0.5,diff=0.1,alpha=0.05,bonf=F)
getPower(n=140,sd=0.5,diff=0.1,alpha=0.05,bonf=F)
getPower(n=150,sd=0.5,diff=0.1,alpha=0.05,bonf=F)
getPower(n=180,sd=0.5,diff=0.1,alpha=0.05,bonf=F)
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
p.vals
p.vals[1:P]
which(df.sim$p.vals[1:P]<0.05)
df.sim$p.vals
df.sim$p.vals[1:20]
which(df.sim$p.vals[1:P]<0.05)
P
df.sim$p.vals[1:P]
P
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
head(df.sim)
df.sim$labels
length(df.sim$labels)
runApp('Documents/shinies2/app1')
df.sim
runApp('Documents/shinies2/app1')
df.sim
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
length(df.sim$labels > 0)
runApp('Documents/shinies2/app1')
length(df.sim$labels) > 0
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
runApp('Documents/shinies2/app1')
