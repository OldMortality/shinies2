(beta[2] > boots2.upp[sim])
boots.t.low[sim] <<- t.low
boots.t.upp[sim] <<- t.upp
}
}
##
## end of simulations
##
# combine power calculations
#
chi.p1 <- calcExcludesZero(chisq.low,chisq.upp)
bo2.p1 <- calcExcludesZero(boots2.low,boots2.upp)
vga.p1 <- calcExcludesZero(vgam.low,vgam.upp)
result.prop1 <- c(chi.p1,bo2.p1,vga.p1)
# combine coverage rates
#
errorChisq <- sum(chisq.err)/N
errorboots2 <- sum(boots2.err,na.rm=T)/length(which(!is.na(boots2.err)))
errorVGAM  <- sum(vgam.err,na.rm=T)/length(which(!is.na(vgam.err)))
# convert error rates to coverage
result.coverage <- c(1-errorChisq,1-errorboots2,1-errorVGAM)
# combine CI median widths
#
chi.width <- calcMedianWidth(chisq.low,chisq.upp)
bo2.width <- calcMedianWidth(boots2.low,boots2.upp)
vga.width <- calcMedianWidth(vgam.low,vgam.upp)
result.width <- c(chi.width,bo2.width,vga.width)
# gather the rates of NAs, ie. the rate of the method not working
chi.na <- 0 # always works
bo2.na <- length(which(is.na(boots2.err)))/N
vga.na <- length(which(is.na(vgam.err)))/N
result.na <- c(chi.na, bo2.na,vga.na)
# combine all results. This one will go to the csv file.
result <- c(result.coverage,result.prop1,result.width,result.na)
return(result)
}
# profvis is for profiling (timing)
#profvis({
t <- doCalculations(population,phi,n,b,N)
hist(phihat.bs[1,])
hist(phihat.bs[2,])
hist(phihat.bs[3,])
hist(phihat.bs[4,])
density(phihat.bs[4,])
plot(density(phihat.bs[4,]))
plot(density(phihat.bs[3,]),add=T)
plot(density(phihat.bs[3,]))
plot(density(phihat.bs[2,]))
plot(density(phihat.bs[1,]))
plot(density(phihat.bs[3,]))
plot('',xlim=c(0,60),ylim=c(0,0.1))
show.n <- 2
plot('',xlim=c(0,60),ylim=c(0,0.1))
for (i in 1:show.n) {
lines(phiat.bs[i,])
}
for (i in 1:show.n) {
lines(phihat.bs[i,])
}
phihat.bs[i,]
show.n <- 2
plot('',xlim=c(0,60),ylim=c(0,0.1))
for (i in 1:show.n) {
hist(phihat.bs[i,])
}
plot('',xlim=c(0,60),ylim=c(0,0.1))
for (i in 1:show.n) {
hist(phihat.bs[i,],add=T)
}
plot('',xlim=c(0,60),ylim=c(0,0.1))
hist(phihat.bs[i,],add=T)
plot('',xlim=c(0,60),ylim=c(0,1))
for (i in 1:show.n) {
hist(phihat.bs[i,],add=T)
}
hist(phihat.bs[i,],add=T)
hist(phihat.bs[i,]
)
hist(phihat.bs[i,],add=T,probability = T)
plot('',xlim=c(0,60),ylim=c(0,1))
for (i in 1:show.n) {
hist(phihat.bs[i,],add=T,probability = T)
}
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[i,],add=T,probability = T)
}
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[i,],add=T,probability = T,col=rainbow(2)[i])
}
show.n <- 10
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[i,],add=T,probability = T,col=rainbow(show.n)[i])
}
show.n <- 3
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,1000))
base
show.n <- 3
base <- round(runif(1,0,1000))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
show.n <- 3
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(phihat.bs[base+i,],add=T,probability = T,col=rainbow(show.n)[i])
}
qt(0.05,phihat.bs[base,])
quantile(0.05,phihat.bs[base,])
quantile(phihat.bs[base,],0.05)
quantile(phihat.bs[base+1,],0.05)
quantile(phihat.bs[base+2,],0.05)
quantile(phihat.bs[base+3,],0.05)
quantile(phihat.bs[base+3,],0.95)
quantile(phihat.bs[base+4,],0.95)
plot('',xlim=c(0,60),ylim=c(0,.1))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
sqrt(1/phihat.bs[base+i,])
plot('',xlim=c(0,60),ylim=c(0,1))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
plot('',xlim=c(0,60),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
plot('',xlim=c(0,2),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,2),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,2),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
base <- round(runif(1,0,90))
plot('',xlim=c(0,2),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
quantile(sqrt(1/phihat.bs[base+i,]),0.05)
base <- round(runif(1,0,90))
quantile(sqrt(1/phihat.bs[base+i,]),0.05)
base <- round(runif(1,0,90))
quantile(sqrt(1/phihat.bs[base+i,]),0.05)
base <- round(runif(1,0,90))
quantile(sqrt(1/phihat.bs[base+i,]),0.05)
base <- round(runif(1,0,90))
quantile(sqrt(1/phihat.bs[base+i,]),0.05)
base <- round(runif(1,0,90))
quantile(sqrt(1/phihat.bs[base+i,]),0.05)
plot('',xlim=c(0,2),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
plot('',xlim=c(0,2),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
plot('',xlim=c(0,2),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
}
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
quantile(sqrt(1/phihat.bs[base+i,]),0.05)
}
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
print(quantile(sqrt(1/phihat.bs[base+i,]),0.05))
}
phi
phi
qt(df=98,0.05)
print(quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
print(quantile(sqrt(1/phihat.bs[base+i,]),0.05))
print(quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
}
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
#print(quantile(sqrt(1/phihat.bs[base+i,]),0.05))
print(quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
}
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
#print(quantile(sqrt(1/phihat.bs[base+i,]),0.05))
print(quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
}
# for testing only:##########
population = "Negbin"
phi = 3
n=1000
b = c(-3,3)
## number of simulations
N = 100
# profvis is for profiling (timing)
#profvis({
t <- doCalculations(population,phi,n,b,N)
show.n <- 100
plot('',xlim=c(0,show.n),ylim=c(-3,3))
segments(seq(1,show.n),boots.t.low,seq(1,show.n),boots.t.upp)
abline(h=chisq.t.upp[1],col='red')
abline(h=chisq.t.low[1],col='red')
show.n <- 3
base <- round(runif(1,0,90))
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
print(quantile(sqrt(1/phihat.bs[base+i,]),0.05))
#print(quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
}
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
$print(quantile(sqrt(1/phihat.bs[base+i,]),0.05))
print(quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
}
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
$print(quantile(sqrt(1/phihat.bs[base+i,]),0.05))
print(quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
}
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
#print(quantile(sqrt(1/phihat.bs[base+i,]),0.05))
print(quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
}
show.n <- 3
show.n <- 5
base <- round(runif(1,0,90))
plot('',xlim=c(0,1),ylim=c(0,10))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
#print(quantile(sqrt(1/phihat.bs[base+i,]),0.05))
print(quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
}
library(stringr)
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
print(str_c(quantile(sqrt(1/phihat.bs[base+i,]),0.05)),
quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
}
print(paste(quantile(sqrt(1/phihat.bs[base+i,]),0.05)),
quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05))
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
print(paste(quantile(sqrt(1/phihat.bs[base+i,]),0.05)),
quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05),sep='')
}
for (i in 1:show.n) {
hist(sqrt(1/phihat.bs[base+i,]),add=T,probability = T,col=rainbow(show.n)[i])
print(paste(quantile(sqrt(1/phihat.bs[base+i,]),0.05),
quantile(rnorm(N.BOOTS) * sqrt(1/phihat.bs[base+i,]),0.05),sep=''))
}
phi
x <- 1:10
funs <- list(mean,median,sum)
lapply(funs, function(x) f(x))
lapply(funs, function(f) f(x))
lapply(funs, function(f) system.time(f(x))
lapply(funs, function(f) system.time(f(x)))
lapply(funs, function(f) system.time(f(x)))
funs2 <- list(
sum = function(x, ...) sum(x, ..., na.rm = TRUE),
mean = function(x, ...) mean(x, ..., na.rm = TRUE),
median = function(x, ...) median(x, ..., na.rm = TRUE)
)
lapply(funs2, function(f) f(x))
?function
)
?function
)
funs2 <- list(
sum = function(x, ...) sum(x,  na.rm = TRUE),
mean = function(x, ...) mean(x, ..., na.rm = TRUE),
median = function(x, ...) median(x, ..., na.rm = TRUE)
)
lapply(funs2, function(f) f(x))
funs2 <- list(
sum = function(x, ...) sum(x, ..., na.rm = TRUE),
mean = function(x, ...) mean(x, ..., na.rm = TRUE),
median = function(x, ...) median(x, ..., na.rm = TRUE)
)
funs2 <- list(
sum = function(x, ...) sum(x,  na.rm = TRUE),
mean = function(x, ...) mean(x, ..., na.rm = TRUE),
median = function(x, ...) median(x, ..., na.rm = TRUE)
)
lapply(funs2, function(f) f(x))
?force
simple_tag <- function(tag) {
force(tag)
function(...) {
paste0("<", tag, ">", paste0(...), "</", tag, ">")
}
}
tags <- c("p", "b", "i")
html <- lapply(setNames(tags, tags), simple_tag)
html
?setNames
simple_tab('fred')
simple_tag('fred')
simple_tag$i('fred')
simple_tag(i,'fred')
simple_tag(i)
simple_tag$i
html$p('fred')
simple_tag <- function(tag) {
#force(tag)
function(...) {
paste0("<", tag, ">", paste0(...), "</", tag, ">")
}
}
tags <- c("p", "b", "i")
html <- lapply(setNames(tags, tags), simple_tag)
html$p('fred')
do.p <- simple_tag('p')
do.p('fred')
setNames(tags, tags)
simple_tag <- function(tag) {
#force(tag)
function(...) {
paste0("<", tag, ">", paste0(...), "</", tag, ">")
}
}
tags <- c("p", "b", "i")
html <- lapply(tags, simple_tag)
html$p('fred')
tags <- c("p", "b", "i")
html <- lapply(tags, simple_tag)
html$"p"
html$p
setNames( 1:3, c("foo", "bar", "baz") )
x <- setNames( 1:3, c("foo", "bar", "baz") )
x$foo
x
x[1]
colnames(x)
names(x)
x$foo
x["foo"]
simple_tag <- function(tag) {
#force(tag)
function(...) {
paste0("<", tag, ">", paste0(...), "</", tag, ">")
}
}
doP <- simple_tag("p")
doP('fred')
with(html, b('this is bold'))
html <- lapply(tags, simple_tag)
with(html, b('this is bold'))
with(html, p('this is bold'))
simple_tag <- function(tag) {
#force(tag)
function(...) {
paste0("<", tag, ">", paste0(...), "</", tag, ">")
}
}
html <- lapply(setNames(tags, tags), simple_tag)
html$b
with(html, b('this is bold'))
html$b
html$b('fred')
?with
?summary
?tibble
library(dplyr)
?tibble
?seq_along
seq.int(1,43)
seq(1,43)
seq_along(32)
seq_along(1:10)
seq_along(1,10)
seq_along(x)
x
r<-list(c(1:10),foo=1,far=2);
r[[1]]
r[1
]
r[[1]]
r[[c(1,2)]]
r
r[[1]]
r[[2]]
r[[3]]
r
z <- r[[1]]
z
z <- r[1]
z
df1   <- data.frame(a = 1:3)
df1$b <- list(4:5, 6:7, 8:9)
df1
df1[[1,2]]
df1[1,2]
str(df1[[1,2]])
str(df1[1,2])
lst <- list('one','two','three')
a <- lst[1]
a
class(a)
a <- lst[[1]]
a
class(a)
a[1]
a[1]
a[2]
a <- lst[[1]]
a[1]
class(a)
shiny::runApp('Documents/shiny/app6')
runApp('Documents/shiny/app6')
runApp('Documents/shiny/app20')
runApp('Documents/shiny/app20')
runApp('Documents/shiny/testdash')
runApp('Documents/shiny/app20')
runApp('Documents/shiny/app20')
runApp('Documents/shiny/app1')
# app 1
# Showing the population height distribution,
#   and allows you to find your own height
#
library(shinydashboard)
# app 1
# Showing the population height distribution,
#   and allows you to find your own height
#
library(shinydashboard)
install.packages("shinydashboard")
shiny::runApp('Documents/shiny/app1')
